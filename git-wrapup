#!/bin/bash -e

if [ "$1" = "--help" -o "$1" = "--help" ]; then
cat <<DOCS
USAGE: git-wrapup <branch>

# summary

wrap up the feature branch that you're working on.

# more info

if <branch> is not given, then use the current branch.

fail if <branch> is 'main' or 'production'. because those probably aren't
features ;)

# implementation details

git-wrapup deletes the branch and its remote tracking branch.

if the branch's remote is origin, then delete the remote branch as well.

if the branch's remote is something other than origin, then presumably you can't
delete the remote, so just remove the branch from the list of fetched branches
in .git/config. this works well with the hub(1) command's feature that checks
out pull requests to your local repo.

# integration

descriptive branch names can be long, so it's helpful to have command line
completion with this command. this is pretty easy if you're using bash and
you've already got git completion setup for bash. if you do, then add this
script to your \$PATH (keep it named "git-wrapup" so "git wrapup" will work),
and then add this line to your bash startup script (~/.bashrc or whatever):

    if which git-wrapup &>/dev/null; then
      _git_wrapup() { _git_branch; }
    fi
DOCS
exit 70 # i guess this is the exit code for a documentatin request?
fi

branch=$1
current_branch="`git rev-parse --abbrev-ref HEAD`"

# default to using the current branch if none is given
if [ ! "$branch" ]; then
  branch="$current_branch"
fi

if [ "$branch" = "$current_branch" ]; then
  git checkout main
fi

if [ "$branch" = main ] || [ "$branch" = production ]; then
  echo ERROR: dont run this on main or production
  exit 1
fi

# this is the remote tracking branch, if one exists and it's not on origin
remote="`git branch --list -vv $branch | \
  ack -v origin | \
  ack -o '\[[^\]]+\]' | \
  ack -o '[^\[:\]]+' | \
  head -1`"

gitconfig="$(git rev-parse --show-toplevel)/.git/config"

if [ "$remote" ]; then
  # delete the remote tracking branch and remove it from the list of fetched
  # branches for this remote
  git branch -dr $remote \
    || rm .git/config/$remote
  perl -pi -e "s|^.*$remote.*\$||" "$gitconfig"
  perl -pi -e 's/^\n//' "$gitconfig"
else
  # we control this branch, so delete it on the remote
  git push origin --delete $branch \
    || rm .git/config/$remote
fi

git branch -D $branch

