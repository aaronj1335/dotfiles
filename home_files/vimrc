" Aaron Stacy's .vimrc file

filetype off
silent call pathogen#runtime_append_all_bundles()
filetype on

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" change "U" to redo
noremap U <C-R>

" get rid of audible bell
set vb 

" Change tab width
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab

inoremap <TAB> <C-P>
"inoremap <TAB> <C-X><C-O>

" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

" set F5 to insert date/time stamp in regular mode or insert mode
noremap <F5> "=strftime("%c")<CR>P
inoremap <F5> <C-R>=strftime("%c")<CR>

" set tabs to normal for Makefiles
au Filetype make set noexpandtab

" set tab width to 4 in python
au Filetype python set expandtab

" turn on the line number and location of the cursor as a percentage of the file
set ruler 

set history=250		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set background=dark
set vb t_vb=

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" disable that effin-stupid man thing that freezes vim up... vim prob freezes
" because of my ridiculous $PAGER hack...
nnoremap K k


" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

  autocmd BufNewFile,BufRead *.json set ft=javascript

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Enable CTRL+direction to switch between split windows
map <C-J> <C-W>j<C-W>_ 
map <C-K> <C-W>k<C-W>_ 

" comment using NERD_commenter
" vmap c ,cl
" vmap u ,cu

set mousemodel=extend

" handy if you crash w/ a bunch of open vim's, just recover the file and then
" type :DiffOrig
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis

" if the file starts w/ "#!" and "/bin/", automatically make it executable
au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent !chmod +x <afile>

" Save file as 'sudo'
cmap w!! w !sudo tee % >/dev/null

if exists("*undofile")
  if finddir("~/.vim_undo") != finddir("~/") . ".vim_undo"
    call mkdir($HOME . "/.vim_undo", "", 0700)
  end
  set undofile
  set undodir=~/.vim_undo
end

if filereadable("remaps.vim")
  source remaps.vim
end

" make netrw directory view a tree view
let g:netrw_liststyle=3
let g:netrw_winsize=1000

if $TERM == 'xterm-256color'
	"colorscheme railscasts
	colorscheme solarized
end
let g:solarized_contrast='high'

set mouse=a
set modelines=0 " apparently this is a security hole?
set scrolloff=2
set ttyfast

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
let mapleader = ","
set textwidth=79
if exists("+colorcolumn")
	set colorcolumn=80
end

nnoremap <tab> %
vnoremap <tab> %
nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap <leader>p gqip
vnoremap <leader>p gqip

if has("clipboard")
	vnoremap <leader>y "*y
	nnoremap <leader>y "*yy
	nnoremap <leader>p "*p

	nnoremap <leader>f :call setreg('*', @%)<cr>
else
	nnoremap <leader>f :call setreg('.', @%)<cr>
end

nnoremap <leader>b <c-^>

let g:CommandTSelectNextMap='<tab>'
let g:CommandTSelectPrevMap='<s-tab>'
let g:CommandTAcceptSelectionMap='<s-cr>'
let g:CommandTAcceptSelectionSplitMap='<cr>'
let g:CommandTMatchWindowAtTop=1

set wildignore+=*.o,*.obj,.git,*CVS

au BufNewFile,BufRead *.md set ft=markdown
function! MarkdownPreview()
	silent w! /tmp/vim_markdown_preview.html
    " silent !python -c "import string,sys,markdown; s = filter(lambda x: x in string.printable, open('/tmp/vim_markdown_preview.html').read()); sys.stdout.write(open('template.html').read() \% markdown.Markdown().convert(s))" > /tmp/vim_markdown_preview.html.2
	silent !markdown /tmp/vim_markdown_preview.html > /tmp/vim_markdown_preview.html.2
	silent !mv /tmp/vim_markdown_preview.html.2 /tmp/vim_markdown_preview.html
	silent !open /tmp/vim_markdown_preview.html
endfunction
au Filetype markdown nnoremap <leader>m :silent call<space>MarkdownPreview()<cr>

function! OpenTray(...)
	if len(a:000) > 0
		execute 'vsplit ' . a:000[0]
	else
		vsplit .
	endif
	vertical resize 25
endfunction

com! -nargs=? -complete=dir Tray call OpenTray(<f-args>)

if ! exists('g:no_session_dot_vim') || g:no_session_dot_vim != 1
    if strlen(@%) == 0 && filereadable("Session.vim")
        silent source Session.vim
    end
end

" my fix for the django-templates bundle
au BufNewFile,BufRead *.djt set ft=htmldjango

" handy print statement shortcuts
au BufNewFile,BufRead *.js nnoremap <buffer> <leader>l oconsole.log();<esc>hi
au BufNewFile,BufRead *.js nnoremap <buffer> <leader><s-l> Oconsole.log();<esc>hi
au BufNewFile,BufRead *.py nnoremap <buffer> <leader>l oprint<space><space><esc>ha
au BufNewFile,BufRead *.py nnoremap <buffer> <leader><s-l> Oprint<space><space><esc>ha

au BufNewFile,BufRead *pythonrc set ft=python

" disable line wrap for quickfix window
au BufReadPost quickfix setlocal nowrap

" make markup languages a shiftwidth of 2
au Filetype htmldjango,html,coffee,ruby setlocal sw=2 sts=2 ts=2 textwidth=0

runtime macros/matchit.vim

" some tips:
" increment/decrement a number: <c-a>/<c-x>
" capitalize: gU
"             so to toggle a character's case: ~
"             to capitalize a word: wgU
"             to lower-case a word: wgu
" to format a long line into an organized paragraph: gql, gqip for paragraph
" to re-format windows newlines to *nix: :%s/<c-v><c-m>/\r\n/gc
" to do a command w/o exiting insert mode: <c-o>
" to pull a word into :ex mode (like for a search and replace): <c-r><c-w>
"                        for the entire word (like capital 'W': <c-r><c-a>
" show current file: <c-g>
" get the name of the current file :! echo %
" execute a command and paste the output into vim :r ! ls -la
" go back to the previous buffer
"
" building macvim:
"   - old instructions:
"	    - first deactivate libiconv: "sudo port deactivate -f libiconv"
"	    - configuration cmd: ./configure --enable-gui=macvim
"	      --with-features=huge --enable-rubyinterp --enable-pythoninterp
"	      --enable-perlinterp --with-python-config-dir=/Library/Frameworks/
"	      Python.framework/Versions/2.7/lib/python2.7/config/config
"	      --enable-cscope
"	    - make then choked when it got to something where it needed to 'curl'
"	      an icon.  this is b/c curl (macports tool) failed w/o libiconv.  at
"	      this point i just re-activated libiconv: "sudo port activate
"	      libiconv"
"	    - i also needed to edit the Makefile in the MacVim/icons directory b/c
"	      the URL for the EnvyCodeR font was wrong.  i put in the correct url
"	      and the build finally succeeded
"
"   - configuration command:
"      LDFLAGS=-L/usr/lib ./configure --enable-gui=macvim --with-features=huge
"      --enable-rubyinterp --enable-pythoninterp --enable-perlinterp
"      --with-python-config-dir=/Library/Frameworks/Python.framework/Versions/
"      2.7/lib/python2.7/config --enable-python3interp
"      --with-python3-config-dir=/Library/Frameworks/Python.framework/Versions/
"      3.2/lib/python3.2/config-3.2m --enable-cscope 
"   - note that b/c of the LDFLAGS env var, i didn't have to deactivate the 
"     libiconv port
"   - this didn't successfully build python3 (who really cares?)
"   - *** DO NOT "sudo make install".  this gets all jacked up.  just drag 
"     src/MacVim/build/Release/MacVim.app into the /Applications dir
"
"	- i also downloaded the better macvim icon from here:
"		http://dribbble.com/shots/121306-MacVim-Replacement-Icon
"	  and then i opened it in preview, selected the image w/ cmd-a, then copied
"	  it w/ cmd-c, then in the info window for the the macvim app, i clicked
"	  the icon and pressed cmd-v
