" Aaron Stacy's .vimrc file

filetype off
call pathogen#runtime_append_all_bundles()

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" change "U" to redo
noremap U <C-R>

" get rid of audible bell
set vb 

" Change tab width
set softtabstop=4
set shiftwidth=4
set tabstop=4
"set expandtab

inoremap <TAB> <C-P>

" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

" set F5 to insert date/time stamp in regular mode or insert mode
noremap <F5> "=strftime("%c")<CR>P
inoremap <F5> <C-R>=strftime("%c")<CR>

" set tabs to normal for Makefiles
"au Filetype make set tabstop=4
"au Filetype make inoremap <tab> <tab>
"au Filetype make set paste
"au Filetype make set noexpandtab

" set tabs to normal for text files
"au Filetype text set tabstop=4
"au Filetype text inoremap <tab> <tab>
"au Filetype text set paste
"au Filetype text set noexpandtab

" set tab width to 4 in python
"au Filetype python set shiftwidth=4
"au Filetype python set tabstop=4

" turn on the line number and location of the cursor as a percentage of the file
set ruler 

set history=250		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set background=dark
set vb t_vb=

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

  autocmd BufNewFile,BufRead *.json set ft=javascript

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Enable CTRL+direction to switch between split windows
map <C-J> <C-W>j<C-W>_ 
map <C-K> <C-W>k<C-W>_ 

" comment using NERD_commenter
vmap c ,cl
vmap u ,cu

set mousemodel=extend

" handy if you crash w/ a bunch of open vim's, just recover the file and then
" type :DiffOrig
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis

" if the file starts w/ "#!" and "/bin/", automatically make it executable
au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent !chmod +x <afile>

" Save file as 'sudo'
cmap w!! w !sudo tee % >/dev/null

if exists("*undofile")
  if finddir("~/.vim_undo") != finddir("~/") . ".vim_undo"
    call mkdir($HOME . "/.vim_undo", "", 0700)
  end
  set undofile
  set undodir=~/.vim_undo
end

if filereadable("remaps.vim")
  source remaps.vim
end

" make netrw directory view a tree view
let g:netrw_liststyle=3

if $TERM == 'xterm-256color'
	"colorscheme railscasts
	colorscheme solarized
end

set mouse=a
set modelines=0 " apparently this is a security hole?
set scrolloff=2
set ttyfast

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
let mapleader = ","
set textwidth=79
if exists("+colorcolumn")
	set colorcolumn=80
end

nnoremap <tab> %
vnoremap <tab> %
nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap <leader>p gqip
vnoremap <leader>p gqip

if has("clipboard")
	vnoremap <leader>y "*y
	nnoremap <leader>p "*p
end

nnoremap <leader>b <c-^>

if strlen(@%) == 0 && filereadable("Session.vim")
	silent source Session.vim
end

if filereadable("Project.vim")
	silent source Project.vim
end

let g:CommandTSelectNextMap='<tab>'
let g:CommandTSelectPrevMap='<s-tab>'
let g:CommandTAcceptSelectionMap='<s-cr>'
let g:CommandTAcceptSelectionSplitMap='<cr>'
let g:CommandTMatchWindowAtTop=1

set wildignore+=*.o,*.obj,.git,*CVS

"if has("python")
"  autocmd FileType html map ,b :python makeBold()
"  pyfile .vimpythonrc
"end

" some tips:
" increment/decrement a number: <c-a>/<c-x>
" capitalize: gU
"             so to toggle a character's case: ~
"             to capitalize a word: wgU
"             to lower-case a word: wgu
" to format a long line into an organized paragraph: gql, gqip for paragraph
" to re-format windows newlines to *nix: :%s/<c-v><c-m>/\r\n/gc
" to do a command w/o exiting insert mode: <c-o>
" to pull a word into :ex mode (like for a search and replace): <c-r><c-w>
"                        for the entire word (like capital 'W': <c-r><c-a>
" show current file: <c-g>
" get the name of the current file :! echo %
" execute a command and paste the output into vim :r ! ls -la
" go back to the previous buffer
