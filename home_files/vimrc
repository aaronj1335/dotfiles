" Aaron Stacy's .vimrc file

execute pathogen#infect()
filetype plugin indent on

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" change "U" to redo
noremap U <C-R>

" get rid of audible bell
set vb

" Change tab width
set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab

inoremap <TAB> <C-P>
"inoremap <TAB> <C-X><C-O>

" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

" set F5 to insert date/time stamp in regular mode or insert mode
noremap <F5> "=strftime("%Y-%m-%dT%H:%M:%S%z")<CR>P
inoremap <F5> <C-R>=strftime("%Y-%m-%dT%H:%M:%S%z")<CR>

" set tabs to normal for Makefiles
au Filetype make setlocal noexpandtab

" set tab width to 4 in python
au Filetype python setlocal expandtab

" turn on the line number and location of the cursor as a percentage of the file
set ruler

set history=250    " keep 50 lines of command line history
set showcmd    " display incomplete commands
set incsearch    " do incremental searching
set background=dark
set vb t_vb=

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" disable that effin-stupid man thing that freezes vim up... vim prob freezes
" because of my ridiculous $PAGER hack...
nnoremap K k

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" Enable CTRL+direction to switch between split windows
map <C-J> <C-W>j<C-W>_ 
map <C-K> <C-W>k<C-W>_ 

set mousemodel=extend

set autoindent

" handy if you crash w/ a bunch of open vim's, just recover the file and then
" type :DiffOrig
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis

" if the file starts w/ "#!" and "/bin/", automatically make it executable
au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent !chmod +x <afile>

" Save file as 'sudo'
cmap w!! w !sudo tee % >/dev/null

if exists("*undofile")
  if finddir("~/.vim_undo") != finddir("~/") . ".vim_undo"
    call mkdir($HOME . "/.vim_undo", "", 0700)
  end
  set undofile
  set undodir=~/.vim_undo
end

" make netrw directory view a tree view
let g:netrw_liststyle=3
let g:netrw_winsize=1000

let g:solarized_contrast='high'
if $TERM_PROGRAM == 'Apple_Terminal'
    let g:solarized_termtrans=1
end
if $TERM =~ '256color$'
  " colorscheme railscasts
  " silent! colorscheme solarized
  silent! colorscheme smyck
end

set mouse=n
set modelines=0 " apparently this is a security hole?
set scrolloff=2
set ttyfast

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
let mapleader = ","
" set textwidth=79
" if exists("+colorcolumn")
"   set colorcolumn=80
" end

nnoremap j gj
nnoremap k gk

" make it so that collapsing things on to one line in html doesn't surround the
" tag w/ spaces
au FileType html,mustache nnoremap <buffer> J Jx

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

if has("clipboard")
  vnoremap <leader>y "*y
  nnoremap <leader>y "*yy
  nnoremap <leader>p "*p

  nnoremap <leader>f :call setreg('*', @%)<cr>
else
  nnoremap <leader>f :call setreg('.', @%)<cr>
end

nnoremap <leader>b <c-^>

let g:CommandTSelectNextMap='<tab>'
let g:CommandTSelectPrevMap='<s-tab>'
let g:CommandTAcceptSelectionMap='<s-cr>'
let g:CommandTAcceptSelectionSplitMap='<cr>'
let g:CommandTMatchWindowAtTop=1

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_custom_ignore = '\v(node_modules/[^/]+/node_modules)|(_site)|(.class)|(dist/)'

autocmd InsertLeave * if pumvisible() == 0|pclose|endif

set wildignore+=*.o,*.obj,.git,*CVS

au BufNewFile,BufRead *.md setlocal ft=markdown
function! MarkdownPreview()
  silent w! /tmp/vim_markdown_preview.html
    " silent !python -c "import string,sys,markdown; s = filter(lambda x: x in string.printable, open('/tmp/vim_markdown_preview.html').read()); sys.stdout.write(open('template.html').read() \% markdown.Markdown().convert(s))" > /tmp/vim_markdown_preview.html.2
  silent !$(which skeldown &>/dev/null && echo 'skeldown' || echo 'markdown') /tmp/vim_markdown_preview.html > /tmp/vim_markdown_preview.html.2
  silent !mv /tmp/vim_markdown_preview.html.2 /tmp/vim_markdown_preview.html
  silent !open /tmp/vim_markdown_preview.html
endfunction
au Filetype markdown,text nnoremap <leader>m :silent call<space>MarkdownPreview()<cr>
au Filetype markdown,ghmarkdown,tex,gitcommit setlocal spell

au Filetype beancount nnoremap <leader>m :update<cr>:make!<cr>

function! OpenTray(...)
  if len(a:000) > 0
    execute 'vsplit ' . a:000[0]
  else
    vsplit .
  endif
  vertical resize 25
endfunction

if !exists(':Tray')
  com -nargs=? -complete=dir Tray call OpenTray(<f-args>)
endif

" my fix for the django-templates bundle
au BufNewFile,BufRead *.djt setlocal ft=htmldjango
au BufNewFile,BufRead *pythonrc setlocal ft=python
au BufNewFile,BufRead *jshintrc,*noderc setlocal ft=javascript
au BufNewFile,BufRead *COMMIT_EDITMSG setlocal textwidth=72
au BufNewFile,BufRead *COMMIT_EDITMSG setlocal colorcolumn=72

" handy print statement shortcuts
au Filetype javascript nnoremap <buffer> <leader>l oconsole.log();<esc>hi
au Filetype javascript nnoremap <buffer> <leader><s-l> Oconsole.log();<esc>hi
au Filetype coffee nnoremap <buffer> <leader>l oconsole.log<space>
au Filetype coffee nnoremap <buffer> <leader><s-l> Oconsole.log<space>
au Filetype python nnoremap <buffer> <leader>l oprint<space><space><esc>ha
au Filetype python nnoremap <buffer> <leader><s-l> Oprint<space><space><esc>ha
au Filetype ruby nnoremap <buffer> <leader>l op<space><space><esc>ha
au Filetype ruby nnoremap <buffer> <leader><s-l> Op<space><space><esc>ha
au Filetype c nnoremap <buffer> <leader>l oprintf("\n");<esc>hhhhi
au Filetype c nnoremap <buffer> <leader><s-l> Oprintf("\n");<esc>hhhhi

" disable line wrap for quickfix window
au BufReadPost quickfix setlocal nowrap

runtime macros/matchit.vim

" some tips:
" increment/decrement a number: <c-a>/<c-x>
" capitalize: gU
"             so to toggle a character's case: ~
"             to capitalize a word: wgU
"             to lower-case a word: wgu
" to format a long line into an organized paragraph: gql, gqip for paragraph
" to re-format windows newlines to *nix: :%s/<c-v><c-m>/\r\n/gc
" to do a command w/o exiting insert mode: <c-o>
" to pull a word into :ex mode (like for a search and replace): <c-r><c-w>
"                        for the entire word (like capital 'W': <c-r><c-a>
" show current file: <c-g>
" get the name of the current file :! echo %
" execute a command and paste the output into vim :r ! ls -la
" go back to the previous buffer
"
" building macvim:
"   - old instructions:
"      - first deactivate libiconv: "sudo port deactivate -f libiconv"
"      - configuration cmd: ./configure --enable-gui=macvim
"        --with-features=huge --enable-rubyinterp --enable-pythoninterp
"        --enable-perlinterp --with-python-config-dir=/Library/Frameworks/
"        Python.framework/Versions/2.7/lib/python2.7/config/config
"        --enable-cscope
"      - make then choked when it got to something where it needed to 'curl'
"        an icon.  this is b/c curl (macports tool) failed w/o libiconv.  at
"        this point i just re-activated libiconv: "sudo port activate
"        libiconv"
"      - i also needed to edit the Makefile in the MacVim/icons directory b/c
"        the URL for the EnvyCodeR font was wrong.  i put in the correct url
"        and the build finally succeeded
"
"   - configuration command:
"      ./configure --enable-gui=macvim --with-features=huge --enable-rubyinterp --enable-pythoninterp --enable-perlinterp --with-python-config-dir=/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config/ --enable-cscope 
"   - *** DO NOT "sudo make install".  this gets all jacked up.  just drag 
"     src/MacVim/build/Release/MacVim.app into the /Applications dir
"
"  - i also downloaded the better macvim icon from here:
"    http://dribbble.com/shots/337065-MacVim-Icon-Updated
"    and then i opened it in preview, selected the image w/ cmd-a, then copied
"    it w/ cmd-c, then in the info window for the the macvim app, i clicked
"    the icon and pressed cmd-v

if !exists("*MaximizeWithoutResizingQuickfix")
  function MaximizeWithoutResizingQuickfix()
  " disable stuff to make this faster
  let SaveLazyredraw = &lazyredraw
  let SaveEi = &ei
  set lazyredraw
  set ei=WinEnter

  let qfwinnr = -1        " quickfix window number
  let tot = winnr('$')    " total number of windows
  let curwinnr = winnr()  " current window number
  let reenable = 0

  for i in range(1, tot)
    if getbufvar(winbufnr(i), '&buftype') == 'quickfix'
      let qfwinnr = i
    endif
  endfor

  if qfwinnr != curwinnr

    let qfheight = winheight(qfwinnr)

    winc _

    if qfwinnr > -1
      if "javascript" == &ft
        if !exists('b:jshint_disabled') || !b:jshint_disabled
          JSHintToggle
          let reenable=1
        endif
      endif
      exe qfwinnr . "wincmd \<c-w>"
      exe 'resize ' . qfheight
      exe curwinnr . "wincmd \<c-w>"
      if reenable
        JSHintToggle
      endif
    endif

  endif

  let &ei = SaveEi
  let &lazyredraw = SaveLazyredraw

  endfunction
endif
nnoremap <C-J> <C-W>j:call<space>MaximizeWithoutResizingQuickfix()<bar>echo<cr>
nnoremap <C-K> <C-W>k:call<space>MaximizeWithoutResizingQuickfix()<bar>echo<cr>

set noequalalways " prevent auto-resizing new windows to equal heights

let g:ackprg="ack -H --nocolor --nogroup --column --follow"

function! HighlightTrailingWhitespace()
  " highlight trailing whitespace
  au BufEnter * match ExtraWhitespace /\s\+$/
  au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  au InsertLeave * match ExtraWhiteSpace /\s\+$/
  highlight ExtraWhitespace ctermbg=red guibg=#413E3C
  au ColorScheme * highlight ExtraWhitespace guibg=#413E3C
endfunction
call HighlightTrailingWhitespace()

set listchars=tab:▸\ 
set list " show invisibles

augroup clojure
  au BufNewFile,BufRead *.edn setlocal filetype=clojure
augroup END

" read local ./.project.vim for project-specific settings
if filereadable(".project.vim")
  source .project.vim
endif

function! MakeSesh()
  execute 'mksession! .session.vim'
endfunction

set sessionoptions+=blank
set sessionoptions+=buffers
set sessionoptions+=options
set sessionoptions+=localoptions
set sessionoptions+=tabpages
set sessionoptions-=resize
set sessionoptions-=winpos
set sessionoptions-=winsize
set sessionoptions-=curdir
set sessionoptions-=folds
set sessionoptions-=help

function! OptionallyMakeSesh()
  if filereadable('.session.vim')
    MakeSesh()
  endif
endfunction

function! RestoreSesh()
  if filereadable('.session.vim')
    silent source .session.vim

    " idk why, but some things are weird if i don't do this
    silent source ~/.gvimrc
    silent call HighlightTrailingWhitespace()
  endif
endfunction

autocmd VimLeave * call OptionallyMakeSesh()
autocmd VimEnter * call RestoreSesh()

let g:syntastic_mode_map = {'mode': 'passive'}
" let g:syntastic_auto_loc_list = 1

au BufWriteCmd *.clj w | silent! Require

set rtp+=~/.fzf

if filereadable('/usr/share/vim/google/google.vim')
  call plug#begin('~/.vim/plugged')
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'sso://user/mcdermottm/vim-csearch'
  call plug#end()

  source /usr/share/vim/google/google.vim
  " Glug youcompleteme-google
  " Glug grok
  " Glug corpweb plugin[mappings]='<leader>w'
  " Glug syntastic-google checkers=`{'python': 'gpylint'}`

  " Run :RelatedFilesWindow to jump to a build file
  Glug relatedfiles

  " Run :FormatCode to auto-format
  Glug codefmt-google

  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  " autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType jslayout AutoFormatBuffer jslfmt
  autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType python AutoFormatBuffer pyformat

  autocmd FileType bzl,blazebuild AutoFormatBuffer buildifier
  " save w/o formatting via:
  " :noautocmd w
  autocmd BufWritePost bzl,blazebuild FormatCode

  " Run :GtiImporter to auto-magically import java files?
  " source /usr/share/vim/google/gtags.vim
  " Glug gtimporter

  " Get the list of piper's active files with ,a
  " nnoremap <leader>a :tabnew<cr>:PiperSelectActiveFiles<cr>/

  au User lsp_setup call lsp#register_server({
      \ 'name': 'Kythe Language Server',
      \ 'cmd': {server_info->['/google/data/ro/teams/grok/tools/kythe_languageserver', '--google3']},
      \ 'whitelist': ['python', 'java', 'proto', 'bzl'],
      \})

  " Jump to definition should actually work.
  nnoremap gd :<C-u>LspDefinition<CR>

  " if executable('workingset') && getcwd() =~ '/google/src'
  "   let g:ctrlp_user_command = "cd %s && workingset"
  " endif

  " Glug csearch
endif
